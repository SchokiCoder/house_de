canceled {
	-primary goal keybinds			.
		-number + key sys			.
		-bind display				.
		 (display characters,
		  that do not yet match a bind)
		-"gg" goto 1st entry			.
		-'g' goto entry				.
		-'G' goto last entry			.
}

missing primary goals {
	-get stderr				.
	 https://stackoverflow.com/questions/30259086/how-to-use-popen
	 (fork and exec-family didn't help,
	  system() only gives return code)
	 
		->print feedback accordingly		.
}

dev goodies {
	-change license text being baked into		.
	 binary via make obsoleting license_str.h
	 -D LICENSE_TEXT=\"$(cat LICENSE)\"
	 missing terminating " character
}

--- Done ---

{
	-fix manpage typo				v
	
	-function pointer as entry cmd			v
	 (as an addition to the
	  shell string)
		->runtime menu creation				v
		  this had literally NO implementation cost
		  :)
	
	-add dirs for cfg targets to build sys		v
	
	-Makefile changes				v
		-add option "-Wvla" to debug			v
		-remove "-Wimplicit-fallthrough=0" from debug	v
		-add "/* fall through */" to switch cases	v
		 that fall through
	
	-add scripting info to manpage			v
	-fix c feedback clear				v
	-fix c feedback only single line		v
	-set version 1.2.0 				v
}

{
	-menu.h remove unnecessary config include	v
	-fix handle command: int size difference	v
	-remove feedback on cmd line enter		v
	
	-remove overall bg color			v
	 this was a weird hack anyways,
	 a real implementation would be much harder
	 and it is not worth it
	 
	-make remove implicit fallthrough warnings	v
	
	-set version to 1.1.1				v
}

{
	-configurable key binds				v
	-configurable menu entry prepend		v

	-rename license.h -> license_str.h		v
	 cus github is weird about it
	
	-set version to 1.1.0				v
}

{
	-arg a (print version, license, repo)	v
	
	-enforce yoda notation			v
	
	-reader sigint and sigtstp		v
	 just end reader
	
	-split struct "runtime" into structs	v
	 of data that relate to each other
	 "data flow rework"
	
	-string rework				v
		-as struct				v
		
		-realloc invalid old size on		v
		 reader very long text
		 and 1st char missing
		 and double free
		 (caused by String_append to wrong pos)
		 
		-feedback has weird characters		v
		 and continues beyond actual text
		 (String_append had invalid src_len) 
	
	-remove draw_upper and draw_lower	v
	 from draw_reader and draw_menu
	
	-rename "app_menu" and "app_reader"	v
	 into "amnu" + "ardr" in hui.c
	
	-check for code fmt / line length	
	
	-return values				x
	 there are none :p
	 
	-print message consistency		v
	 (format, stdout vs stderr)
	 fix feedback on wrong cmdin
	 
	-std config				v
	 (with compiler warning when untouched)
	
	-line-break causes 1 character to	v
	 disappear
	 
	-scrolling over a broken line pushes	v
	 1 character into the next visible
	 line
	
	-scrolling over the first visible line	v
	 of a broken line pushes 1 character
	 into the second visible line

	-reader feedback use background color	v
	 cfg: reader_bg, reader_fg
	 
	-manpage				v
	
	-make: proper install			v
	
	-fix missing color.h include		v
	 in hstring.h for gcc and clang
	
	-remove unused parameters and variables	v
	
	-fix implicit popen and pclose		v
	 declaration
	
	-build and run tests			v
		-linux					v
		
		-openbsd				v
		 remove openbsd incompatible characters
		 from config.h
		 add different manprefix for openbsd
		
		-freebsd				v
		 tcc compile err:
		 /usr/include/sys/_types.h:107":
		 error: ',' expected (got "__aligned")
		 
		-windows... pffft as if 		lololol
	
	-v 1.0.0				v
}

{
	-multiline feedback			v
		-> vertical scrolling			v
	
	-fix scroll limit			v
	-fix 1st line being just empty		v
	 when scrolled
	 (newline prepended at top)
	-fix str_lines not handling		v
	 empty strings

	-execute				v
		-keybind				v
		-get stdout				v
		-get stderr				x
		-print according to goal		x
	
	-remove manually set feedback		v
	 (in init_rt)

	-handle_key returns int for		v
	 continue flagging,
	 is it obsolete?
	 yes, was at end of
	 mainloop anyway lol.
	
	-stdout fgets stops at newline		v
	 use fread
	
	-long feedback reader			v
		-missing x counter reset		v
		 (causes scroll-up just hiding
		  top line
		  and unnecessary line breaks)
		 
		-prints beyond string len		v
		 until scroll
		 (just replace current with mem alloc)
	
		-new feedback doesnt replace old one	v
		-once reader is used, it will		v
		 always be used for feedback	

	-reader height awareness		v
	
	-reader is one line short at end	v

	-reader after scroll 1st line is	v
	 always empty
	
	-reader can overscroll past the		v
	 last line
	 rt->feedback_lines is too high
	 str_lines() missing x reset
	
	-reader 1st character missing		v
	
	-reader_scroll reset on exit		v
	
	-menu draw height awareness		v
	
	-vertical menu scrolling		v
	 cursor follow
	
	-handle any todos			v
	 or // comments
		
	-v 0.3.0				v
}

{
	-fix menu open using cursor=0	v
	-fix cursor down		v
	 using main menu bounds
	 
	-code restructuring		v

	-commands			v
		-"quit", "q", "exit"		v
		-number				v
		 (move entry cursor to num)
	
	-v 0.2.0			v
}

{
	-portability tests		v
	 works on openbsd and freebsd
	 via tcc
	 
	-feedback line			v
	-feedback color cfg		v
	-cmd line color cfg		v
	-draw simplicifcation		v
	-bg color			v
	-handle in src todos		v
	 (and // comments)
	-cmdline prepend string cfg	v
	-cmdline enter			v
	 (':')
	-cmdline leave			v
	 (ctl + 'c'; enter)

	-v 0.1.0			v
}

{
	-config struct			v
	-draw				v
	-get term size and print	v
	 amount of empty lines
	 accordingly
	-mainloop			v
		 
	-keyboard ctl			<-- rolled back
		-j, k (down, up)		v
			-cursor				v
				-int, cntl			v
				-draw				v
		-l, h (right, left)		v
			-menu pointer			v
			-menu switch			v
	
	-fixes				v
		-disable stdout buf		v
		-reset term x, y		v
		-clear then redraw		x

	-termbox			x
		-impl				v
		-multichar fixes		x
		 (middle score 'â€”')

	-rollback			v
	 (a8a4e09c4bd6dac4c7df99c131bcf9ca7d57d990)
	 
	-backport menu switch sys	v
	-clear screen			v
	-colors				v
	-hide terminal text cursor	v
	-draw menu cursor		v
	-colors in config		v

	-version option			v
	-v 0.0.1			v
}

